#compdef risk 
#autoload

# Entrypoint ================================================================================== 

_risk () 
{
    local cmd
    if (( CURRENT > 2 )); then
        cmd=${words[2]}
        # Set the context for the subcommand
        curcontext="${curcontext%:*:*}:risk-$cmd"
        # Narrow the range of words we are looking at to exclude `risk`
        (( CURRENT-- ))
        shift words
        # Run the completion for the subcommand
        case "${cmd}" in
            hush)
                _hush
                ;;
            backup)
                _backup
                ;;
        esac
    else
        local -a subcmds
        subcmds=(
            'hush:Attach or detach the hush partition to vault'
            'backup:Attach or detach a backup partition to vault'
            'open:Open identity and/or associated stores in the vault only'
            'close:Close identity and/or associated stores in the vault only'
            'slam:Close identity and/or associated stores in the vault only, and detach hush/backup'
            'init:Creates associated VMs for an identity (joe-gw, joe-vpn, joe-msg, joe-web)'
            'spin:Start entire identity infrastructure (or part of it) and move data they need'
            'fold:Stop an entire identity infrastructure (or part of it) and move back data to vault'
        )

        _describe -t commands 'commands' subcmds
    fi
}

# Subcomands ==================================================================================

# Completes the commands for hush, without parameters
_hush_commands () 
{
    local -a hushcmds 
    hushcmds=(
        'attach:Attach the hush drive to vault'
        'detach:Detach the hush drive from vault'
    )

    _describe -t commands 'hush commands' hushcmds && ret=0
}

# Completion dispatcher for hush subcommand
_hush ()
{
    local ret=1
    local line state

    # Register subcommands and argument patterns
    _arguments -C \
        "${_flags_base[@]}" \
        "1: :_hush_commands" \
        "*::arg:->args" \
        && ret=0

    # Arguments completion
    case $state in
        args)
            case $line[1] in
            attach)
                _arguments \
                    "${_flags_base[@]}" \
                    '1:hush block device:_block_devices' \
                    '2:vault VM:($(_known_vms))' \
                    && ret=0
                ;;
            *)
                _arguments \
                    "${_flags_base[@]}" \
                    && ret=0
                ;;
            esac
    esac
}

# Completes the commands for backup, without parameters
_backup_commands () 
{
    local -a subcmds 
    subcmds=(
        'attach:Attach a backup drive to vault'
        'detach:Detach the backup drive from vault'
    )

    _describe -t commands 'backup commands' subcmds && ret=0
}

# Completion dispatcher for backup subcommand
_backup ()
{
    local ret=1
    local line state

    # Register subcommands and argument patterns
    _arguments -C \
        "1: :_backup_commands" \
        "*::arg:->args" \
        && ret=0

    # Arguments completion
    case $state in
        args)
            case $line[1] in
            attach)
                _arguments \
                    "${_flags_base[@]}" \
                    '1:backup block device:_block_devices' \
                    '2:vault VM:($(_known_vms))' \
                    && ret=0
                ;;
            *)
                _arguments \
                    "${_flags_base[@]}" \
                    && ret=0
                ;;
            esac
    esac
}

# Flags =======================================================================================

# Flags that are present on all commands
_flags_base=(
    {-v,--verbose}'[Enable verbose logging]'
    {-h,--help}'[Print help for the command]'
    )


# Command arguments ===========================================================================

# Completes qubes-style block devices
_block_devices () 
{
    local -a blocks

    local -a devices=("${(@f)$(qvm-block list)}")
    for device in "${devices[@]}"; do
        id=$(echo $device | awk 'END {print $1}' | sed 's/\:/\\:/g') 
        desc=$(echo $device | awk 'END {print $2}'| sed 's/\:/\\:/g') 

        blocks+=("$id:${desc}")
    done

    _describe -t arguments 'block devices' blocks && ret=0
}

# Completes VMs
_known_vms () 
{
    if [[ -x /usr/bin/qvm-ls ]]; then
        qvm-ls --raw-list | sort
    elif [[ -f ~/.qubes/known_vms ]]; then
        cat ~/.qubes/known_vms | tr ' ' '\n' | sed '/^$/d' | tr '\n' ' '
    fi
}


# don't run the completion function when being source-ed or eval-ed
if [ "$funcstack[1]" = "_risk" ]; then
        _risk
fi
